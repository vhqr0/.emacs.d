;;;###autoload
(defun list-kill-ring ()
  (interactive)
  (switch-to-buffer-other-window "*list-kill-ring*")
  (let ((inhibit-read-only t))
    (erase-buffer)
    (dolist (text kill-ring)
      (insert text "\n\n\C-l\n\n")))
  (set-buffer-modified-p nil)
  (goto-char (point-min))
  (view-mode 1))

(defun list-imenu-select ()
  (interactive)
  (let ((pos (get-char-property (point) :pos)))
    (when (markerp pos)
      (switch-to-buffer (marker-buffer pos))
      (goto-char pos))))

(defun list-imenu-select-other-window ()
  (interactive)
  (let ((pos (get-char-property (point) :pos)))
    (when (markerp pos)
      (switch-to-buffer-other-window (marker-buffer pos))
      (goto-char pos))))

(declare-function imenu--make-index-alist "imenu")

;;;###autoload
(defun list-imenu ()
  (interactive)
  (require 'imenu)
  (let ((index-alist (imenu--make-index-alist)))
    (switch-to-buffer "*list-imenu*")
    (let ((inhibit-read-only t))
      (erase-buffer)
      (dolist (index index-alist)
        (cond ((markerp (cdr index))
               (insert (propertize (concat (car index) "\n") :pos (cdr index))))
              ((consp (cdr index))
               (dolist (sindex (cdr index))
                 (when (markerp (cdr sindex))
                   (insert (propertize (concat (car index) " :: " (car sindex) "\n") :pos (cdr sindex))))))))
      (set-buffer-modified-p nil)
      (goto-char (point-min))
      (special-mode)
      (local-set-key "o" 'list-imenu-select-other-window)
      (local-set-key (kbd "RET") 'list-imenu-select))))

(provide 'list-misc)
